#!/bin/bash

# Define file path/name variable
repositories_file="config/repo.yaml"

# Function to add a repository item to the YAML file
add_repository() {
    # Check if YAML file exists
    if [ ! -f "$repositories_file" ]; then
        echo "repositories:" > "$repositories_file"
    fi

    # Read repository name
    if [ -z "$1" ]; then
        read -p "Enter repository name: " repo_name
    else
        repo_name="$1"
    fi

    # Read repository URL
    if [ -z "$2" ]; then
    read -p "Enter repository URL: " repo_url
    else
        repo_url="$2"
    fi

    # Validate and auto-detect repository type based on URL format
    if [[ "$repo_url" == "https://api.github.com/orgs"* ]]; then
        repo_type="ghapi-orgs"
    elif [[ "$repo_url" == "https://api.github.com/repos"* ]]; then
        repo_type="ghapi-releases"
    elif [[ "$repo_url" == "http://"*"/"*"/"* || "$repo_url" == "https://"*"/"*"/"* ]]; then
        repo_type="agr"
    elif [[ "$repo_url" == "http://"* || "$repo_url" == "https://"* ]]; then
        repo_type="git"
    else
        echo "Invalid repository URL format."
        return
    fi

    # Append new repository item to YAML file
    echo "- repo_name: $repo_name" >> "$repositories_file"
    echo "  repo_type: $repo_type" >> "$repositories_file"
    echo "  repo_url: $repo_url" >> "$repositories_file"

    echo "Repository added successfully."
}

# Function to load repositories into arrays
load_repositories() {
    # Initialize arrays for storing repository information
    repo_names=()
    repo_types=()
    repo_urls=()

    # Read repositories from YAML file
    while IFS= read -r line; do
        if [[ $line == *"repo_name"* ]]; then
            repo_name=$(echo "$line" | awk '{print $3}')
            repo_names+=("$repo_name")
        elif [[ $line == *"repo_type"* ]]; then
            repo_type=$(echo "$line" | awk '{print $2}')
            repo_types+=("$repo_type")
        elif [[ $line == *"repo_url"* ]]; then
            repo_url=$(echo "$line" | awk '{print $2}')
            repo_urls+=("$repo_url")
        fi
    done < "$repositories_file"
}

# Function to list repositories sorted by type
list_repositories() {
    load_repositories

    # Print repositories
    echo "List of Repositories:"
    for ((i = 0; i < ${#repo_names[@]}; i++)); do
        echo "  Name: ${repo_names[i]}"
        echo "  Type: ${repo_types[i]}"
        echo "  URL: ${repo_urls[i]}"
    done
}

# Function to fetch packages of a repositories
fetch_repositories() {
    load_repositories

    for ((i = 0; i < ${#repo_names[@]}; i++)); do
        case ${repo_types[i]} in
            agr)
                echo "fetching ${repo_names[i]} ..."
                agr rem set ${repo_names[i]} ${repo_urls[i]}.git
                agr
                ;;
            ghapi-orgs)
                echo "fetching ${repo_names[i]} ..."
                echo "api rem set ${repo_names[i]} ${repo_urls[i]}"
                echo -e "n" | get_ghapi_orgs ${repo_urls[i]}
                ;;
            ghapi-releases)
                echo "fetching ${repo_names[i]} ..."
                adrepo_url=${repo_urls[i]}
                echo -e "n" | install_ghrel_packages .pkg.tar. | grep .pkg.tar.*
                ;;
            git)
                echo "fetching ${repo_names[i]} ..."
                echo "git rem set ${repo_names[i]} ${repo_urls[i]}"
                ;;
            *)
                echo "Invalid repository type. Valid types are: agr, ghapi-orgs, ghapi-releases, git."
                return
                ;;
        esac

    done

    #ghrel .pkg.tar.
    #ghorg full_name split /
    #git 
    #agr rem set 
}

# Main script
while true; do
    echo "1. Add Repository"
    echo "2. List Repositories"
    echo "3. Exit"
    read -p "Enter your choice: " choice

    case $choice in
        1)
            add_repository
            ;;
        2)
            fetch_repositories
            ;;
        3)
            echo "Exiting..."
            exit 0
            ;;
        *)
            echo "Invalid choice. Please try again."
            ;;
    esac
done
